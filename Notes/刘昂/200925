一、基础知识
Html：
1.样式分类：
内联样式 style
内部样式表 body{}  .class{}  #id{}
外部样式表 <link rel="stylesheet" type="text/css" href="mystyle.css">
2.动态规划：
基本思想：问题的最优解如果可以由子问题的最优解推导得到，则可以先求解子问题的最优解，在构造原问题的最优解；若子问题有较多的重复出现，则可以自底向上从最终子问题向原问题逐步求解。
    使用条件：可分为多个相关子问题，子问题的解被重复使用
     Optimal substructure（优化子结构）：
    动态规划特点：
     1.把原始问题划分成一系列子问题；
     2.求解每个子问题仅一次，并将其结果保存在一个表中，以后用到时直接存取，不重复计算，节省计算时间
     3.自底向上地计算。
     4.整体问题最优解取决于子问题的最优解（状态转移方程）（将子问题称为状态，最终状态的求解归结为其他状态的求解）

二、代码
1.最长回文串
动态规划算法：
#include<iostream>
#include<cstdio> 
#include<string>
#include<vector>
using namespace std;

int main(){
	int n;
	cin>>n;
	string s;
	cin>>s;
	int maxsize=1;
	vector<vector<int> > dp(n,vector<int>(n,0));
	for(int i = 0; i < n;i++){
		dp[i][i] = 1; 
		if(i<n-1 && s[i]==s[i+1]){
			dp[i][i+1]=1;
			maxsize = 2;
		}
	}
	for(int i = 2; i<n;i++){
		for(int j = 0; j<(n-i);j++){
		
			if(s[j]==s[j+i]&&dp[j+1][j+i-1]==1){
				dp[j][j+i] = 1;
				maxsize = i+1;
			}
		}
	} 

	cout<<maxsize;
} 
2.https://leetcode-cn.com/problems/search-in-rotated-sorted-array/submissions/

答案：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n-1;
        if(n == 1) {
            if(nums[0]==target) return 0;
            else return -1;
        }
        while(l <= r){
            int mid = (l+r)/2;

            if(nums[mid] == target) return mid;

            if(nums[0] <= target && target < nums[mid]) r = mid - 1;

            else if(nums[mid] < nums[0] && nums[0] <= target ) r = mid - 1;

            else if(target < nums[mid]  && nums[mid] < nums[0] ) r = mid - 1;
           
            else l = mid + 1;
        }
        return -1;
    }
};
三、开源任务：
学习python的基础知识，上传自己的学习内容
